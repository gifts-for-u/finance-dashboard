name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      FIREBASE_PROJECT_ID: finance-dashboard-10nfl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare Firebase credentials
        id: auth
        shell: bash
        run: |
          set -euo pipefail
          SA_FILE="$(mktemp)"
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > "$SA_FILE"
          chmod 600 "$SA_FILE"
          echo "credentials_file=$SA_FILE" >> "$GITHUB_OUTPUT"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Build project
        if: hashFiles('package.json') != ''
        run: npm run build

      - name: Deploy to Firebase Hosting
        id: deploy
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file }}
        shell: bash
        run: |
          set -euo pipefail
          firebase deploy --only hosting --project "$FIREBASE_PROJECT_ID" --json > deploy-output.json
          cat deploy-output.json
          node <<'NODE' > deploy-metadata.txt
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('deploy-output.json', 'utf8'));
          const hosting = (data.result && data.result.hosting && data.result.hosting[0]) || {};
          const entries = {
            deploy_url: hosting.deployUrl || '',
            console_url: hosting.consoleUrl || '',
            channel_id: hosting.channelId || ''
          };
          const lines = Object.entries(entries)
            .filter(([, value]) => value)
            .map(([key, value]) => `${key}=${value}`);
          if (lines.length) {
            process.stdout.write(lines.join('\n'));
          }
          NODE
          if [ -s deploy-metadata.txt ]; then
            cat deploy-metadata.txt >> "$GITHUB_OUTPUT"
          fi
          rm -f deploy-output.json deploy-metadata.txt

      - name: Publish deployment summary
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "### Firebase Hosting deployment"
            echo
            echo "- **Site**: https://$FIREBASE_PROJECT_ID.web.app"
            if [ -n "${{ steps.deploy.outputs.channel_id }}" ]; then
              echo "- **Channel**: ${{ steps.deploy.outputs.channel_id }}"
            fi
            if [ -n "${{ steps.deploy.outputs.deploy_url }}" ]; then
              echo "- **Preview URL**: ${{ steps.deploy.outputs.deploy_url }}"
            fi
            if [ -n "${{ steps.deploy.outputs.console_url }}" ]; then
              echo "- **Firebase console**: ${{ steps.deploy.outputs.console_url }}"
            fi
            echo "- **Workflow run**: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Clean up credentials
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ steps.auth.outputs.credentials_file }}" ] && [ -f "${{ steps.auth.outputs.credentials_file }}" ]; then
            shred --remove "${{ steps.auth.outputs.credentials_file }}" || rm -f "${{ steps.auth.outputs.credentials_file }}"
          fi
